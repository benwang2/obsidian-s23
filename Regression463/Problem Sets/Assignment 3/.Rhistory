plot(modeling_no_outliers$Temperature, sqrt(modeling_no_outliers$Alcohol_Percentage), main="Sqrt Transformation")
# Observing the inverse transformed model: Does not improve heterodasticity
plot(modeling_no_outliers$Temperature, 1/(1/modeling_no_outliers$Alcohol_Percentage), main="Inverse transformation")
plot(
Alcohol_Percentage ~ Temperature, data=modeling_no_outliers,
main="Alcohol Percentage vs Temperature",
xlab="Temperature (degrees F)",
ylab="Alcohol Percentage"
#ylim=c(2,8)
)
# Observing Weighted-Least-Squares model: Slightly improves heterodasticity
modeling_weights = fitted( lm(abs(residuals(modeling_no_outliers_lm))~fitted(modeling_no_outliers_lm)) )^2
wls_model = lm(Alcohol_Percentage ~ Temperature, data=modeling_no_outliers, weights=modeling_weights)
abline(modeling_no_outliers_lm,col="red")
abline(wls_model,col="blue",lwd=2)
# Observing the log transformed model: Slightly improves heterodasticity
plot(modeling_no_outliers$Temperature, 1/log(modeling_no_outliers$Alcohol_Percentage), main="Log transformation")
# Observing the sqrt transformed model: Does not improve heterodasticity
plot(modeling_no_outliers$Temperature, sqrt(modeling_no_outliers$Alcohol_Percentage), main="Sqrt Transformation")
# Observing the inverse transformed model: Does not improve heterodasticity
plot(modeling_no_outliers$Temperature, (1/modeling_no_outliers$Alcohol_Percentage), main="Inverse transformation")
plot(
Alcohol_Percentage ~ Temperature, data=modeling_no_outliers,
main="Alcohol Percentage vs Temperature",
xlab="Temperature (degrees F)",
ylab="Alcohol Percentage"
#ylim=c(2,8)
)
# Observing Weighted-Least-Squares model: Slightly improves heterodasticity
modeling_weights = fitted( lm(abs(residuals(modeling_no_outliers_lm))~fitted(modeling_no_outliers_lm)) )^2
wls_model = lm(Alcohol_Percentage ~ Temperature, data=modeling_no_outliers, weights=modeling_weights)
abline(modeling_no_outliers_lm,col="red")
abline(wls_model,col="blue",lwd=2)
# Observing the log transformed model: Slightly improves heterodasticity
plot(modeling_no_outliers$Temperature, log(modeling_no_outliers$Alcohol_Percentage), main="Log transformation")
# Observing the sqrt transformed model: Does not improve heterodasticity
plot(modeling_no_outliers$Temperature, 1/sqrt(modeling_no_outliers$Alcohol_Percentage), main="Sqrt Transformation")
# Observing the inverse transformed model: Does not improve heterodasticity
plot(modeling_no_outliers$Temperature, (1/modeling_no_outliers$Alcohol_Percentage), main="Inverse transformation")
plot(
Alcohol_Percentage ~ Temperature, data=modeling_no_outliers,
main="Alcohol Percentage vs Temperature",
xlab="Temperature (degrees F)",
ylab="Alcohol Percentage"
#ylim=c(2,8)
)
# Observing Weighted-Least-Squares model: Slightly improves heterodasticity
modeling_weights = fitted( lm(abs(residuals(modeling_no_outliers_lm))~fitted(modeling_no_outliers_lm)) )^2
wls_model = lm(Alcohol_Percentage ~ Temperature, data=modeling_no_outliers, weights=modeling_weights)
abline(modeling_no_outliers_lm,col="red")
abline(wls_model,col="blue",lwd=2)
# Observing the log transformed model: Slightly improves heterodasticity
plot(modeling_no_outliers$Temperature, log(modeling_no_outliers$Alcohol_Percentage), main="Log transformation")
# Observing the sqrt transformed model: Does not improve heterodasticity
plot(modeling_no_outliers$Temperature, log(sqrt(modeling_no_outliers$Alcohol_Percentage)), main="Sqrt Transformation")
# Observing the inverse transformed model: Does not improve heterodasticity
plot(modeling_no_outliers$Temperature, (1/modeling_no_outliers$Alcohol_Percentage), main="Inverse transformation")
plot(
Alcohol_Percentage ~ Temperature, data=modeling_no_outliers,
main="Alcohol Percentage vs Temperature",
xlab="Temperature (degrees F)",
ylab="Alcohol Percentage"
#ylim=c(2,8)
)
# Observing Weighted-Least-Squares model: Slightly improves heterodasticity
modeling_weights = fitted( lm(abs(residuals(modeling_no_outliers_lm))~fitted(modeling_no_outliers_lm)) )^2
wls_model = lm(Alcohol_Percentage ~ Temperature, data=modeling_no_outliers, weights=modeling_weights)
abline(modeling_no_outliers_lm,col="red")
abline(wls_model,col="blue",lwd=2)
# Observing the log transformed model: Slightly improves heterodasticity
plot(modeling_no_outliers$Temperature, log(modeling_no_outliers$Alcohol_Percentage), main="Log transformation")
# Observing the sqrt transformed model: Does not improve heterodasticity
plot(modeling_no_outliers$Temperature, sqrt(sqrt(modeling_no_outliers$Alcohol_Percentage)), main="Sqrt Transformation")
# Observing the inverse transformed model: Does not improve heterodasticity
plot(modeling_no_outliers$Temperature, (1/modeling_no_outliers$Alcohol_Percentage), main="Inverse transformation")
plot(
Alcohol_Percentage ~ Temperature, data=modeling_no_outliers,
main="Alcohol Percentage vs Temperature",
xlab="Temperature (degrees F)",
ylab="Alcohol Percentage"
#ylim=c(2,8)
)
# Observing Weighted-Least-Squares model: Slightly improves heterodasticity
modeling_weights = fitted( lm(abs(residuals(modeling_no_outliers_lm))~fitted(modeling_no_outliers_lm)) )^2
wls_model = lm(Alcohol_Percentage ~ Temperature, data=modeling_no_outliers, weights=modeling_weights)
abline(modeling_no_outliers_lm,col="red")
abline(wls_model,col="blue",lwd=2)
# Observing the log transformed model: Slightly improves heterodasticity
plot(modeling_no_outliers$Temperature, sqrt(log(modeling_no_outliers$Alcohol_Percentage)), main="Log transformation")
# Observing the sqrt transformed model: Does not improve heterodasticity
plot(modeling_no_outliers$Temperature, sqrt(modeling_no_outliers$Alcohol_Percentage), main="Sqrt Transformation")
# Observing the inverse transformed model: Does not improve heterodasticity
plot(modeling_no_outliers$Temperature, (1/modeling_no_outliers$Alcohol_Percentage), main="Inverse transformation")
plot(
Alcohol_Percentage ~ Temperature, data=modeling_no_outliers,
main="Alcohol Percentage vs Temperature",
xlab="Temperature (degrees F)",
ylab="Alcohol Percentage"
#ylim=c(2,8)
)
# Observing Weighted-Least-Squares model: Slightly improves heterodasticity
modeling_weights = fitted( lm(abs(residuals(modeling_no_outliers_lm))~fitted(modeling_no_outliers_lm)) )^2
wls_model = lm(Alcohol_Percentage ~ Temperature, data=modeling_no_outliers, weights=modeling_weights)
abline(modeling_no_outliers_lm,col="red")
abline(wls_model,col="blue",lwd=2)
# Observing the log transformed model: Slightly improves heterodasticity
plot(modeling_no_outliers$Temperature, log(modeling_no_outliers$Alcohol_Percentage), main="Log transformation")
# Observing the sqrt transformed model: Does not improve heterodasticity
plot(modeling_no_outliers$Temperature, sqrt(modeling_no_outliers$Alcohol_Percentage), main="Sqrt Transformation")
# Observing the inverse transformed model: Does not improve heterodasticity
plot(modeling_no_outliers$Temperature, log(1/modeling_no_outliers$Alcohol_Percentage), main="Inverse transformation")
plot(
Alcohol_Percentage ~ Temperature, data=modeling_no_outliers,
main="Alcohol Percentage vs Temperature",
xlab="Temperature (degrees F)",
ylab="Alcohol Percentage"
#ylim=c(2,8)
)
# Observing Weighted-Least-Squares model: Slightly improves heterodasticity
modeling_weights = fitted( lm(abs(residuals(modeling_no_outliers_lm))~fitted(modeling_no_outliers_lm)) )$fitted.values^2
plot(
Alcohol_Percentage ~ Temperature, data=modeling_no_outliers,
main="Alcohol Percentage vs Temperature",
xlab="Temperature (degrees F)",
ylab="Alcohol Percentage"
#ylim=c(2,8)
)
# Observing Weighted-Least-Squares model: Slightly improves heterodasticity
modeling_weights = fitted( lm(abs(residuals(modeling_no_outliers_lm))~fitted(modeling_no_outliers_lm)) )^2
wls_model = lm(Alcohol_Percentage ~ Temperature, data=modeling_no_outliers, weights=modeling_weights)
abline(modeling_no_outliers_lm,col="red")
abline(wls_model,col="blue",lwd=2)
# Observing the log transformed model: Slightly improves heterodasticity
plot(modeling_no_outliers$Temperature, log(modeling_no_outliers$Alcohol_Percentage), main="Log transformation")
# Observing the sqrt transformed model: Does not improve heterodasticity
plot(modeling_no_outliers$Temperature, sqrt(modeling_no_outliers$Alcohol_Percentage), main="Sqrt Transformation")
# Observing the inverse transformed model: Does not improve heterodasticity
plot(modeling_no_outliers$Temperature, 1/modeling_no_outliers$Alcohol_Percentage, main="Inverse transformation")
plot(modeling_no_outliers$Temperature, 1/modeling_no_outliers$Alcohol_Percentage, main="Inverse transformation")
inverse_lm = lm(1/Alcohol_Percentage ~ Temperature, data=modeling)
plot(modeling_no_outliers$Temperature, 1/modeling_no_outliers$Alcohol_Percentage, main="Inverse transformation")
inverse_lm = lm(1/Alcohol_Percentage ~ Temperature, data=modeling_no_outliers)
inverse_weights = fitted( lm(abs(residuals(inverse_lm))~fitted(inverse_lm)) )^2
wls_model = lm(1/Alcohol_Percentage ~ Temperature, data=modeling_no_outliers, weights=inverse_weights)
plot(modeling_no_outliers$Temperature, 1/modeling_no_outliers$Alcohol_Percentage, main="Inverse transformation")
inverse_lm = lm(1/Alcohol_Percentage ~ Temperature, data=modeling_no_outliers)
inverse_weights = fitted( lm(abs(residuals(inverse_lm))~fitted(inverse_lm)) )^2
wls_model = lm(1/Alcohol_Percentage ~ Temperature, data=modeling_no_outliers, weights=inverse_weights)
abline(wls_model)
plot(modeling_no_outliers$Temperature, 1/modeling_no_outliers$Alcohol_Percentage, main="Inverse transformation")
inverse_lm = lm(1/Alcohol_Percentage ~ Temperature, data=modeling_no_outliers)
inverse_weights = fitted( lm(abs(residuals(inverse_lm))~fitted(inverse_lm)) )^2
wls_model = lm(1/Alcohol_Percentage ~ Temperature, data=modeling_no_outliers, weights=inverse_weights)
abline(wls_model)
summary(wls_model)
plot(modeling_no_outliers$Temperature, 1/modeling_no_outliers$Alcohol_Percentage, main="Inverse transformation")
inverse_lm = lm(1/Alcohol_Percentage ~ Temperature, data=modeling_no_outliers)
plot(fitted(inverse_lm), resid(inverse_lm), main = "Residuals vs. Fitted Values Plot",
xlab = "Fitted Values", ylab = "Residuals",ylim=c(-1,1))
plot(modeling_no_outliers$Temperature, 1/modeling_no_outliers$Alcohol_Percentage, main="Inverse transformation")
inverse_lm = lm(1/Alcohol_Percentage ~ Temperature, data=modeling_no_outliers)
plot(fitted(inverse_lm), resid(inverse_lm), main = "Residuals vs. Fitted Values Plot",
xlab = "Fitted Values", ylab = "Residuals",ylim=c(-1,1))
lm(0,0)
plot(modeling_no_outliers$Temperature, 1/modeling_no_outliers$Alcohol_Percentage, main="Inverse transformation")
inverse_lm = lm(1/Alcohol_Percentage ~ Temperature, data=modeling_no_outliers)
plot(fitted(inverse_lm), resid(inverse_lm), main = "Residuals vs. Fitted Values Plot",
xlab = "Fitted Values", ylab = "Residuals",ylim=c(-1,1))
abline(0,0)
plot(modeling_no_outliers$Temperature, 1/modeling_no_outliers$Alcohol_Percentage, main="Inverse transformation")
inverse_lm = lm(1/Alcohol_Percentage ~ Temperature, data=modeling_no_outliers)
plot(fitted(inverse_lm), resid(inverse_lm), main = "Residuals vs. Fitted Values Plot",
xlab = "Fitted Values", ylab = "Residuals",ylim=c(-.1,.1))
abline(0,0)
plot(modeling_no_outliers$Temperature, sqrt(modeling_no_outliers$Alcohol_Percentage), main="Inverse transformation")
inverse_lm = lm(1/Alcohol_Percentage ~ Temperature, data=modeling_no_outliers)
plot(fitted(inverse_lm), resid(inverse_lm), main = "Residuals vs. Fitted Values Plot",
xlab = "Fitted Values", ylab = "Residuals",ylim=c(-.1,.1))
abline(0,0)
plot(modeling_no_outliers$Temperature, log(modeling_no_outliers$Alcohol_Percentage), main="Inverse transformation")
inverse_lm = lm(1/Alcohol_Percentage ~ Temperature, data=modeling_no_outliers)
plot(fitted(inverse_lm), resid(inverse_lm), main = "Residuals vs. Fitted Values Plot",
xlab = "Fitted Values", ylab = "Residuals",ylim=c(-.1,.1))
abline(0,0)
plot(modeling_no_outliers$Temperature, log(1/modeling_no_outliers$Alcohol_Percentage), main="Inverse transformation")
inverse_lm = lm(1/Alcohol_Percentage ~ Temperature, data=modeling_no_outliers)
plot(fitted(inverse_lm), resid(inverse_lm), main = "Residuals vs. Fitted Values Plot",
xlab = "Fitted Values", ylab = "Residuals",ylim=c(-.1,.1))
abline(0,0)
plot(modeling_no_outliers$Temperature, log(sqrt(modeling_no_outliers$Alcohol_Percentage)), main="Inverse transformation")
inverse_lm = lm(1/Alcohol_Percentage ~ Temperature, data=modeling_no_outliers)
plot(fitted(inverse_lm), resid(inverse_lm), main = "Residuals vs. Fitted Values Plot",
xlab = "Fitted Values", ylab = "Residuals",ylim=c(-.1,.1))
abline(0,0)
plot(modeling_no_outliers$Temperature, sqrt(log(modeling_no_outliers$Alcohol_Percentage)), main="Inverse transformation")
inverse_lm = lm(1/Alcohol_Percentage ~ Temperature, data=modeling_no_outliers)
plot(fitted(inverse_lm), resid(inverse_lm), main = "Residuals vs. Fitted Values Plot",
xlab = "Fitted Values", ylab = "Residuals",ylim=c(-.1,.1))
abline(0,0)
plot(modeling_no_outliers$Temperature, sqrt(1/(modeling_no_outliers$Alcohol_Percentage)), main="Inverse transformation")
inverse_lm = lm(1/Alcohol_Percentage ~ Temperature, data=modeling_no_outliers)
plot(fitted(inverse_lm), resid(inverse_lm), main = "Residuals vs. Fitted Values Plot",
xlab = "Fitted Values", ylab = "Residuals",ylim=c(-.1,.1))
abline(0,0)
plot(
Alcohol_Percentage ~ Temperature, data=modeling_no_outliers,
main="Alcohol Percentage vs Temperature",
xlab="Temperature (degrees F)",
ylab="Alcohol Percentage"
#ylim=c(2,8)
)
# Observing Weighted-Least-Squares model: Slightly improves heterodasticity
modeling_weights = fitted( lm(abs(residuals(modeling_no_outliers_lm))~fitted(modeling_no_outliers_lm)) )^2
wls_model = lm(Alcohol_Percentage ~ Temperature, data=modeling_no_outliers, weights=modeling_weights)
abline(modeling_no_outliers_lm,col="red")
abline(wls_model,col="blue",lwd=2)
# Observing the log transformed model: Slightly improves heterodasticity
plot(modeling_no_outliers$Temperature, log(modeling_no_outliers$Alcohol_Percentage), main="Log transformation")
# Observing the sqrt transformed model: Does not improve heterodasticity
plot(modeling_no_outliers$Temperature, sqrt(modeling_no_outliers$Alcohol_Percentage), main="Sqrt Transformation")
plot(modeling_no_outliers$Temperature, sqrt(1/(modeling_no_outliers$Alcohol_Percentage)), main="Inverse transformation")
inverse_lm = lm(1/Alcohol_Percentage ~ Temperature, data=modeling_no_outliers)
plot(fitted(wls_model), resid(wls_model), main = "Residuals vs. Fitted Values Plot",
xlab = "Fitted Values", ylab = "Residuals",ylim=c(-.1,.1))
abline(0,0)
plot(modeling_no_outliers$Temperature, sqrt(1/(modeling_no_outliers$Alcohol_Percentage)), main="Inverse transformation")
inverse_lm = lm(1/Alcohol_Percentage ~ Temperature, data=modeling_no_outliers)
plot(fitted(wls_model), resid(wls_model), main = "Residuals vs. Fitted Values Plot",
xlab = "Fitted Values", ylab = "Residuals")
abline(0,0)
plot(modeling_no_outliers$Temperature, 1/sqrt(modeling_no_outliers$Alcohol_Percentage), main="Inverse transformation")
inverse_lm = lm(1/Alcohol_Percentage ~ Temperature, data=modeling_no_outliers)
plot(fitted(wls_model), resid(wls_model), main = "Residuals vs. Fitted Values Plot",
xlab = "Fitted Values", ylab = "Residuals")
abline(0,0)
plot(modeling_no_outliers$Temperature, 1/log(modeling_no_outliers$Alcohol_Percentage), main="Inverse transformation")
inverse_lm = lm(1/Alcohol_Percentage ~ Temperature, data=modeling_no_outliers)
plot(fitted(wls_model), resid(wls_model), main = "Residuals vs. Fitted Values Plot",
xlab = "Fitted Values", ylab = "Residuals")
abline(0,0)
plot(modeling_no_outliers$Temperature, 1/1(modeling_no_outliers$Alcohol_Percentage), main="Inverse transformation")
plot(modeling_no_outliers$Temperature, 1/(1/modeling_no_outliers$Alcohol_Percentage), main="Inverse transformation")
inverse_lm = lm(1/Alcohol_Percentage ~ Temperature, data=modeling_no_outliers)
plot(fitted(wls_model), resid(wls_model), main = "Residuals vs. Fitted Values Plot",
xlab = "Fitted Values", ylab = "Residuals")
abline(0,0)
plot(modeling_no_outliers$Temperature, 1/(log(modeling_no_outliers$Alcohol_Percentage)), main="Inverse transformation")
inverse_lm = lm(1/Alcohol_Percentage ~ Temperature, data=modeling_no_outliers)
plot(fitted(wls_model), resid(wls_model), main = "Residuals vs. Fitted Values Plot",
xlab = "Fitted Values", ylab = "Residuals")
abline(0,0)
plot(modeling_no_outliers$Temperature, 1/(log(modeling_no_outliers$Alcohol_Percentage)), main="Inverse transformation")
test_model = lm(1/Alcohol_Percentage ~ Temperature, data=modeling_no_outliers)
plot(fitted(test_model), resid(test_model), main = "Residuals vs. Fitted Values Plot",
xlab = "Fitted Values", ylab = "Residuals")
abline(0,0)
plot(modeling_no_outliers$Temperature, 1/(log(modeling_no_outliers$Alcohol_Percentage)), main="Inverse transformation")
test_model = lm(1/log(Alcohol_Percentage) ~ Temperature, data=modeling_no_outliers)
plot(fitted(test_model), resid(test_model), main = "Residuals vs. Fitted Values Plot",
xlab = "Fitted Values", ylab = "Residuals")
abline(0,0)
plot(modeling_no_outliers$Temperature, 1/(log(modeling_no_outliers$Alcohol_Percentage)), main="Inverse transformation")
test_model = lm(1/(1/Alcohol_Percentage) ~ Temperature, data=modeling_no_outliers)
plot(fitted(test_model), resid(test_model), main = "Residuals vs. Fitted Values Plot",
xlab = "Fitted Values", ylab = "Residuals")
abline(0,0)
plot(modeling_no_outliers$Temperature, 1/(log(modeling_no_outliers$Alcohol_Percentage)), main="Inverse transformation")
test_model = lm(log(1/Alcohol_Percentage) ~ Temperature, data=modeling_no_outliers)
plot(fitted(test_model), resid(test_model), main = "Residuals vs. Fitted Values Plot",
xlab = "Fitted Values", ylab = "Residuals")
abline(0,0)
plot(modeling_no_outliers$Temperature, 1/(log(modeling_no_outliers$Alcohol_Percentage)), main="Inverse transformation")
test_model = lm(Alcohol_Percentage^0.3 ~ Temperature, data=modeling_no_outliers)
plot(fitted(test_model), resid(test_model), main = "Residuals vs. Fitted Values Plot",
xlab = "Fitted Values", ylab = "Residuals")
abline(0,0)
plot(modeling_no_outliers$Temperature, 1/(log(modeling_no_outliers$Alcohol_Percentage)), main="Inverse transformation")
test_model = lm(Alcohol_Percentage^0.2 ~ Temperature, data=modeling_no_outliers)
plot(fitted(test_model), resid(test_model), main = "Residuals vs. Fitted Values Plot",
xlab = "Fitted Values", ylab = "Residuals")
abline(0,0)
plot(modeling_no_outliers$Temperature, 1/(log(modeling_no_outliers$Alcohol_Percentage)), main="Inverse transformation")
test_model = lm(Alcohol_Percentage^0.5 ~ Temperature, data=modeling_no_outliers)
plot(fitted(test_model), resid(test_model), main = "Residuals vs. Fitted Values Plot",
xlab = "Fitted Values", ylab = "Residuals")
abline(0,0)
plot(modeling_no_outliers$Temperature, 1/(log(modeling_no_outliers$Alcohol_Percentage)), main="Inverse transformation")
test_model = lm(Alcohol_Percentage^0.1 ~ Temperature, data=modeling_no_outliers)
plot(fitted(test_model), resid(test_model), main = "Residuals vs. Fitted Values Plot",
xlab = "Fitted Values", ylab = "Residuals")
abline(0,0)
plot(modeling_no_outliers$Temperature, 1/(log(modeling_no_outliers$Alcohol_Percentage)), main="Inverse transformation")
test_model = lm(log(Alcohol_Percentage^0.1) ~ Temperature, data=modeling_no_outliers)
plot(fitted(test_model), resid(test_model), main = "Residuals vs. Fitted Values Plot",
xlab = "Fitted Values", ylab = "Residuals")
abline(0,0)
plot(modeling_no_outliers$Temperature, 1/(log(modeling_no_outliers$Alcohol_Percentage)), main="Inverse transformation")
test_model = lm(log(Alcohol_Percentage^0.01) ~ Temperature, data=modeling_no_outliers)
plot(fitted(test_model), resid(test_model), main = "Residuals vs. Fitted Values Plot",
xlab = "Fitted Values", ylab = "Residuals")
abline(0,0)
plot(modeling_no_outliers$Temperature, 1/(log(modeling_no_outliers$Alcohol_Percentage)), main="Inverse transformation")
test_model = lm(log(Alcohol_Percentage^0.001) ~ Temperature, data=modeling_no_outliers)
plot(fitted(test_model), resid(test_model), main = "Residuals vs. Fitted Values Plot",
xlab = "Fitted Values", ylab = "Residuals")
abline(0,0)
plot(modeling_no_outliers$Temperature, 1/(log(modeling_no_outliers$Alcohol_Percentage)), main="Inverse transformation")
test_model = lm(Alcohol_Percentage^0.05 ~ Temperature, data=modeling_no_outliers)
plot(fitted(test_model), resid(test_model), main = "Residuals vs. Fitted Values Plot",
xlab = "Fitted Values", ylab = "Residuals")
abline(0,0)
plot(modeling_no_outliers$Temperature, 1/(log(modeling_no_outliers$Alcohol_Percentage)), main="Inverse transformation")
test_model = lm(Alcohol_Percentage ~ Temperature, data=modeling_no_outliers)
plot(fitted(test_model), resid(test_model), main = "Residuals vs. Fitted Values Plot",
xlab = "Fitted Values", ylab = "Residuals")
abline(0,0)
plot(modeling_no_outliers$Temperature, 1/(log(modeling_no_outliers$Alcohol_Percentage)), main="Inverse transformation")
test_model = lm(log(Alcohol_Percentage) ~ Temperature, data=modeling_no_outliers)
plot(fitted(test_model), resid(test_model), main = "Residuals vs. Fitted Values Plot",
xlab = "Fitted Values", ylab = "Residuals")
abline(0,0)
plot(fitted(modeling_lm), resid(modeling_lm), main = "Residuals vs. Fitted Values Plot",
xlab = "Fitted Values", ylab = "Residuals",ylim=c(-1,1))
abline(h = 0, lty = "dashed")
bptest(modeling_lm)
knitr::opts_chunk$set(echo = TRUE)
modeling = read.table("./modeling_data.txt",sep="\t",header=TRUE)
modeling_lm = lm(Alcohol_Percentage ~ Temperature, data=modeling)
plot(
Alcohol_Percentage ~ Temperature, data=modeling,
main="Alcohol Percentage vs Temperature",
xlab="Temperature (degrees F)",
ylab="Alcohol Percentage"
)
abline(modeling_lm,col="red")
plot(fitted(modeling_lm), resid(modeling_lm), main = "Residuals vs. Fitted Values Plot",
xlab = "Fitted Values", ylab = "Residuals",ylim=c(-1,1))
abline(h = 0, lty = "dashed")
qqnorm(resid(modeling_lm),ylim=c(-1,2))
qqline(resid(modeling_lm),col="red")
modeling_no_outliers = modeling[modeling$Alcohol_Percentage >= 0,]
plot(
Alcohol_Percentage ~ Temperature, data=modeling_no_outliers,
main="Alcohol Percentage vs Temperature",
xlab="Temperature (degrees F)",
ylab="Alcohol Percentage",
ylim=c(2,8)
)
modeling_no_outliers_lm = lm(Alcohol_Percentage ~ Temperature, data=modeling_no_outliers)
abline(modeling_no_outliers_lm, col="red")
summary(modeling_no_outliers_lm)
validation = read.table("./validation_data.txt",sep="\t",header=TRUE)
predicted = predict(modeling_no_outliers_lm, data.frame(Temperature=validation[,1]))
comparison = data.frame(Predicted=predicted, Observed=validation[,2])
comparison_lm = lm(Predicted ~ Observed, data=comparison)
plot(Predicted ~ Observed, data=comparison,pch=20, main="Predicted vs Actual Alcohol Percentage")
abline(comparison_lm,col="red")
cor(comparison$Observed, comparison$Predicted)
plot(
Alcohol_Percentage ~ Temperature, data=modeling_no_outliers,
main="Alcohol Percentage vs Temperature",
xlab="Temperature (degrees F)",
ylab="Alcohol Percentage"
#ylim=c(2,8)
)
# Observing Weighted-Least-Squares model: Slightly improves heterodasticity
modeling_weights = fitted( lm(abs(residuals(modeling_no_outliers_lm))~fitted(modeling_no_outliers_lm)) )^2
wls_model = lm(Alcohol_Percentage ~ Temperature, data=modeling_no_outliers, weights=modeling_weights)
abline(modeling_no_outliers_lm,col="red")
abline(wls_model,col="blue",lwd=2)
# Observing the log transformed model: Slightly improves heterodasticity
plot(modeling_no_outliers$Temperature, log(modeling_no_outliers$Alcohol_Percentage), main="Log transformation")
# Observing the sqrt transformed model: Does not improve heterodasticity
plot(modeling_no_outliers$Temperature, sqrt(modeling_no_outliers$Alcohol_Percentage), main="Sqrt Transformation")
plot(modeling_no_outliers$Temperature, 1/(log(modeling_no_outliers$Alcohol_Percentage)), main="Inverse transformation")
test_model = lm(log(Alcohol_Percentage) ~ Temperature, data=modeling_no_outliers)
plot(fitted(test_model), resid(test_model), main = "Residuals vs. Fitted Values Plot",
xlab = "Fitted Values", ylab = "Residuals")
abline(0,0)
predicted_model = predict(wls_model, data.frame(Temperature=validation[,1]))
comparison_model = data.frame(Predicted=predicted_model, Observed=validation[,2])
comparison_model_lm = lm(Predicted ~ Observed, data=comparison_model)
plot(Predicted ~ Observed, data=comparison_model,pch=20)
abline(comparison_model_lm,col="blue",lwd=2)
cor(comparison_model$Observed, comparison_model$Predicted)
plot(
Alcohol_Percentage ~ Temperature, data=modeling_no_outliers,
main="Alcohol Percentage vs Temperature",
xlab="Temperature (degrees F)",
ylab="Alcohol Percentage",
ylim=c(2,8)
)
modeling_no_outliers_lm = lm(Alcohol_Percentage ~ Temperature, data=modeling_no_outliers)
abline(wls_model,col="blue",lwd=2)
conf_int = predict(modeling_no_outliers_lm, interval="prediction", level=0.95)
conf_int = cbind(modeling_no_outliers$Temperature, conf_int)
conf_int = conf_int[order(conf_int[,1]),]
points(conf_int[,1], conf_int[,3], type="l", lty=2, col="purple")
points(conf_int[,1], conf_int[,4], type="l", lty=2, col="green")
#print("Lower bound")
lower_bound = lm(conf_int[,3]~conf_int[,1])
coef(lower_bound)
#print("Upper bound")
upper_bound = lm(conf_int[,4]~conf_int[,1])
coef(upper_bound)
plot(
Alcohol_Percentage ~ Temperature, data=modeling_no_outliers,
main="Alcohol Percentage vs Temperature",
xlab="Temperature (degrees F)",
ylab="Alcohol Percentage"
#ylim=c(2,8)
)
# Observing Weighted-Least-Squares model: Slightly improves heterodasticity
modeling_weights = fitted( lm(abs(residuals(modeling_no_outliers_lm))~fitted(modeling_no_outliers_lm)) )^2
wls_model = lm(Alcohol_Percentage ~ Temperature, data=modeling_no_outliers, weights=modeling_weights)
abline(modeling_no_outliers_lm,col="red")
abline(wls_model,col="blue",lwd=2)
# Observing the log transformed model: Slightly improves heterodasticity
plot(modeling_no_outliers$Temperature, log(modeling_no_outliers$Alcohol_Percentage), main="Log transformation")
log_model = lm(log(Alcohol_Percentage)~Temperature, data=modeling_no_outliers)
points(modeling_no_outliers$Temperature, exp(log_model$coe[1]+log_model$coe[2]*log(modeling_no_outliers$Temperature)), type="l", col="green")
# Observing the sqrt transformed model: Does not improve heterodasticity
plot(modeling_no_outliers$Temperature, sqrt(modeling_no_outliers$Alcohol_Percentage), main="Sqrt Transformation")
plot(
Alcohol_Percentage ~ Temperature, data=modeling_no_outliers,
main="Alcohol Percentage vs Temperature",
xlab="Temperature (degrees F)",
ylab="Alcohol Percentage"
#ylim=c(2,8)
)
# Observing Weighted-Least-Squares model: Slightly improves heterodasticity
modeling_weights = fitted( lm(abs(residuals(modeling_no_outliers_lm))~fitted(modeling_no_outliers_lm)) )^2
wls_model = lm(Alcohol_Percentage ~ Temperature, data=modeling_no_outliers, weights=modeling_weights)
abline(modeling_no_outliers_lm,col="red")
abline(wls_model,col="blue",lwd=2)
# Observing the log transformed model: Slightly improves heterodasticity
# plot(modeling_no_outliers$Temperature, log(modeling_no_outliers$Alcohol_Percentage), main="Log transformation")
log_model = lm(log(Alcohol_Percentage)~Temperature, data=modeling_no_outliers)
points(modeling_no_outliers$Temperature, exp(log_model$coe[1]+log_model$coe[2]*log(modeling_no_outliers$Temperature)), type="l", col="green")
# Observing the sqrt transformed model: Does not improve heterodasticity
plot(modeling_no_outliers$Temperature, sqrt(modeling_no_outliers$Alcohol_Percentage), main="Sqrt Transformation")
plot(
Alcohol_Percentage ~ Temperature, data=modeling_no_outliers,
main="Alcohol Percentage vs Temperature",
xlab="Temperature (degrees F)",
ylab="Alcohol Percentage"
#ylim=c(2,8)
)
# Observing Weighted-Least-Squares model: Slightly improves heterodasticity
modeling_weights = fitted( lm(abs(residuals(modeling_no_outliers_lm))~fitted(modeling_no_outliers_lm)) )^2
wls_model = lm(Alcohol_Percentage ~ Temperature, data=modeling_no_outliers, weights=modeling_weights)
abline(modeling_no_outliers_lm,col="red")
abline(wls_model,col="blue",lwd=2)
# Observing the log transformed model: Slightly improves heterodasticity
# plot(modeling_no_outliers$Temperature, log(modeling_no_outliers$Alcohol_Percentage), main="Log transformation")
log_model = lm(log(Alcohol_Percentage)~Temperature, data=modeling_no_outliers)
points(modeling_no_outliers$Temperature, exp(log_model$coe[1]+log_model$coe[2])), type="l", col="green")
plot(
Alcohol_Percentage ~ Temperature, data=modeling_no_outliers,
main="Alcohol Percentage vs Temperature",
xlab="Temperature (degrees F)",
ylab="Alcohol Percentage"
#ylim=c(2,8)
)
# Observing Weighted-Least-Squares model: Slightly improves heterodasticity
modeling_weights = fitted( lm(abs(residuals(modeling_no_outliers_lm))~fitted(modeling_no_outliers_lm)) )^2
wls_model = lm(Alcohol_Percentage ~ Temperature, data=modeling_no_outliers, weights=modeling_weights)
abline(modeling_no_outliers_lm,col="red")
abline(wls_model,col="blue",lwd=2)
# Observing the log transformed model: Slightly improves heterodasticity
plot(modeling_no_outliers$Temperature, log(modeling_no_outliers$Alcohol_Percentage), main="Log transformation")
# Observing the sqrt transformed model: Does not improve heterodasticity
plot(modeling_no_outliers$Temperature, sqrt(modeling_no_outliers$Alcohol_Percentage), main="Sqrt Transformation")
plot(
Alcohol_Percentage ~ Temperature, data=modeling_no_outliers,
main="Alcohol Percentage vs Temperature",
xlab="Temperature (degrees F)",
ylab="Alcohol Percentage"
#ylim=c(2,8)
)
# Observing Weighted-Least-Squares model: Slightly improves heterodasticity
modeling_weights = fitted( lm(abs(residuals(modeling_no_outliers_lm))~fitted(modeling_no_outliers_lm)) )^2
wls_model = lm(Alcohol_Percentage ~ Temperature, data=modeling_no_outliers, weights=modeling_weights)
abline(modeling_no_outliers_lm,col="red")
abline(wls_model,col="blue",lwd=2)
# Observing the log transformed model: Slightly improves heterodasticity
plot(modeling_no_outliers$Temperature, log(modeling_no_outliers$Alcohol_Percentage), main="Log transformation")
# Observing the sqrt transformed model: Does not improve heterodasticity
plot(modeling_no_outliers$Temperature, sqrt(modeling_no_outliers$Alcohol_Percentage), main="Sqrt Transformation")
# Observing the inverse transformed model: Does not improve heterodasticity
plot(modeling_no_outliers$Temperature, 1/modeling_no_outliers$Alcohol_Percentage, main="Inverse Transformation")
plot(modeling_no_outliers$Temperature, 1/(log(modeling_no_outliers$Alcohol_Percentage)), main="Inverse transformation")
test_model = lm(1/(Alcohol_Percentage) ~ Temperature, data=modeling_no_outliers)
plot(fitted(test_model), resid(test_model), main = "Residuals vs. Fitted Values Plot",
xlab = "Fitted Values", ylab = "Residuals")
abline(0,0)
plot(modeling_no_outliers$Temperature, 1/modeling_no_outliers$Alcohol_Percentage), main="Inverse transformation")
plot(modeling_no_outliers$Temperature, 1/modeling_no_outliers$Alcohol_Percentage, main="Inverse transformation")
test_model = lm(1/(Alcohol_Percentage) ~ Temperature, data=modeling_no_outliers)
plot(fitted(test_model), resid(test_model), main = "Residuals vs. Fitted Values Plot",
xlab = "Fitted Values", ylab = "Residuals")
abline(0,0)
plot(modeling_no_outliers$Temperature, modeling_no_outliers$Alcohol_Percentage/2, main="Inverse transformation")
test_model = lm(1/(Alcohol_Percentage) ~ Temperature, data=modeling_no_outliers)
plot(fitted(test_model), resid(test_model), main = "Residuals vs. Fitted Values Plot",
xlab = "Fitted Values", ylab = "Residuals")
abline(0,0)
plot(modeling_no_outliers$Temperature, modeling_no_outliers$Alcohol_Percentage/10, main="Inverse transformation")
test_model = lm(1/(Alcohol_Percentage) ~ Temperature, data=modeling_no_outliers)
plot(fitted(test_model), resid(test_model), main = "Residuals vs. Fitted Values Plot",
xlab = "Fitted Values", ylab = "Residuals")
abline(0,0)
